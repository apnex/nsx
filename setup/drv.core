#!/bin/bash

VCUSER=$(cat vcsa-credentials | jq -r .username)
VCPASS=$(cat vcsa-credentials | jq -r .password)
VCHOST=$(cat vcsa-credentials | jq -r .hostname)
VCDOMAIN=$(cat vcsa-credentials | jq -r .domain)
USER=$(cat nsx-credentials | jq -r .username)
PASS=$(cat nsx-credentials | jq -r .password)
HOST=$(cat nsx-credentials | jq -r .hostname)
DOMAIN=$(cat nsx-credentials | jq -r .domain)
OFFLINE=$(cat nsx-credentials | jq -r .offline)

# COLOURS
NC='\033[0m' # no colour
BLACK='\033[0;30m' # black
RED='\033[0;31m' # red
GREEN='\033[0;32m' # green
ORANGE='\033[0;33m' # orange
BLUE='\033[0;34m' # blue
PURPLE='\033[0;35m' # purple
CYAN='\033[0;36m' # cyan
LIGHTGREY='\033[0;37m' # light grey
DARKGREY='\033[0;30m' # dark grey
LIGHTRED='\033[0;31m' # light red
LIGHTGREEN='\033[0;32m' # light green
YELLOW='\033[0;33m' # yellow
LIGHTBLUE='\033[0;34m' # light blue
LIGHTPURPLE='\033[0;35m' # light purple
LIGHTCYAN='\033[0;36m' # light cyan
WHITE='\033[0;37m' # white

function corange {
	local STRING=${1}
	printf "${ORANGE}${STRING}${NC}"
}
function cgreen {
	local STRING=${1}
	printf "${GREEN}${STRING}${NC}"
}
function ccyan {
	local STRING=${1}
	printf "${CYAN}${STRING}${NC}"
}

function login {
	URL="https://$HOST/api/session/create"
	curl -k -c nsx-cookies.txt -D nsx-headers.txt -X POST \
	-d "j_username=$USER&j_password=$PASS" \
	"$URL" 1>/dev/null 2>/dev/null
}

function session {
	if [[ "$OFFLINE" == "false" ]]; then
		SESSIONFILE='nsx-cookies.txt'
		#printf "Validating existing session...\n" 1>&2
		if [ -f $SESSIONFILE ]; then
			MYDATE=$(stat -c %y "$SESSIONFILE")
			LAPSE="$(($(date '+%s') - $(date -d "$MYDATE" '+%s')))"
			#printf "File [$SESSIONFILE] exists - age [$LAPSE]\n" 1>&2
			if [ "$LAPSE" -ge 600 ]; then
				printf "Session older than [600] seconds, reauthenticating...\n" 1>&2
				login
			fi
		else
			printf "File [$SESSIONFILE] does not exist - authenticating...\n" 1>&2
			login
		fi
	fi
}

# if I have credentials, test ping
# if ping succeeds, test SSL (use THUMBPRINT for test)
# if SSL succeeds - proceed
#NSXPING=$(ping -W 1 -c 1 "$HOST" &>/dev/null && echo 1 || echo 0)
#VCPING=$(ping -W 1 -c 1 "$VCHOST" &>/dev/null && echo 1 || echo 0)
#THUMBPRINT=$(./thumbprint.sh "$HOST")

# look at moving session to get, post, delete functions
#session

function isSuccess {
	local STRING=${1}
	if [[ $STRING =~ ^(.*)([0-9]{3})$ ]]; then
		local BODY=${BASH_REMATCH[1]}
		local CODE=${BASH_REMATCH[2]}
	fi
	if [[ $CODE =~ 2..$ ]]; then
		printf "[$(ccyan "${CODE}")] - SUCCESS\n" 1>&2
	else
		printf "[$(ccyan "${CODE}")] - ERROR\n" 1>&2
	fi
	printf "%s\n" "${BODY}"
}

function getFile {
	local ENDPOINT=${1}
	case "${ENDPOINT}" in
		*"transport-nodes"*)
			REGEX='transport-nodes/([^\/]+)/([^\/]+)$'
			if [[ ${ENDPOINT} =~ $REGEX ]]; then
				local ITEMID=${BASH_REMATCH[1]}
				local ITEMCM=${BASH_REMATCH[2]}
				NSXOUT="state.tnode.${ITEMID}.${ITEMCM}.json"
			else
				NSXOUT="state.tnode.json"
			fi
		;;
		*"transport-zones"*)
			NSXOUT="state.tzone.json"
		;;
		*"fabric/compute-managers"*)
			NSXOUT="state.cmanager.json"
		;;
		*"edge-clusters"*)
			NSXOUT="state.edge-clusters.json"
		;;
		*"cluster-profiles"*)
			NSXOUT="state.cluster-profiles.json"
		;;
		*"trust-management/certificates"*)
			NSXOUT="state.certificates.json"
		;;
		*"fabric/nodes"*)
			REGEX='fabric/nodes/([^\/]+)/([^\/]+)$'
			if [[ ${ENDPOINT} =~ $REGEX ]]; then
				local ITEMID=${BASH_REMATCH[1]}
				local ITEMCM=${BASH_REMATCH[2]}
				NSXOUT="state.node.${ITEMID}.${ITEMCM}.json"
			else
				NSXOUT="state.node.json"
			fi
		;;
		*"host-switch-profiles"*)
			NSXOUT="state.profile.json"
		;;
		*"pools/ip-pools")
			NSXOUT="state.pool.json"
		;;
		*"pools/ip-blocks")
			NSXOUT="state.block.json"
		;;
		*"logical-routers"*)
			NSXOUT="state.router.json"
		;;
		*"logical-switches"*)
			NSXOUT="state.switch.json"
		;;
		*"spec/openapi/nsx_api.json"*)
			NSXOUT="nsx_api.json"
		;;
	esac
	printf "state/$NSXOUT"
}

function buildURL {
	session
	local ENDPOINT=${1}
	local BASE="https://$HOST/api/v1/"
	if [[ "$OFFLINE" == "true" ]]; then
		local NSXFILE=$(getFile "${1}")
		URL="${NSXFILE}"
	else
		URL="$BASE$ENDPOINT"
	fi
	printf "$URL"
}

function rPost {
	local URL=${1}
	local BODY=${2}
	if [[ "$OFFLINE" == "true" ]]; then
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
	else
		RESPONSE=$(curl -k -b nsx-cookies.txt -w "%{http_code}" -X POST \
		-H "`grep X-XSRF-TOKEN nsx-headers.txt`" \
		-H "Content-Type: application/json" \
		-d "$BODY" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "$RESPONSE")
	fi
	printf "%s\n" "${RESULT}" | jq --tab .
}

function rDelete {
	local URL=${1}
	local BODY=${2}
	if [[ "$OFFLINE" == "true" ]]; then
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
		#NSXFILE="${URL}"
	else
		#NSXFILE=$(getFile "${1}")
		RESPONSE=$(curl -k -b nsx-cookies.txt -w "%{http_code}" -G -X DELETE \
		-H "`grep X-XSRF-TOKEN nsx-headers.txt`" \
		-H "Content-Type: application/x-form-urlencoded" \
		--data-urlencode "$BODY" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
	fi
	printf "%s\n" "${RESULT}" | jq --tab .
	#work out state synch for deletes
	#printf "rm ${NSXFILE}"
}

function rGet {
	local URL=${1}
	local STATE
	if [[ "$OFFLINE" == "true" ]]; then
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
		RESULT=$(cat "${URL}")
		STATE="${URL}"
	else
		RESPONSE=$(curl -k -b nsx-cookies.txt -w "%{http_code}" -X GET \
		-H "`grep X-XSRF-TOKEN nsx-headers.txt`" \
		-H "Content-Type: application/json" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
		STATE=$(getFile "${URL}")
	fi
	printf "%s\n" "${RESULT}" | jq --tab . > "${STATE}"
	printf "%s\n" "${RESULT}"
}
