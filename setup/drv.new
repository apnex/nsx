#!/bin/bash

# COLOURS
NC='\033[0m' # no colour
BLACK='\033[0;30m' # black
RED='\033[0;31m' # red
GREEN='\033[0;32m' # green
ORANGE='\033[0;33m' # orange
BLUE='\033[0;34m' # blue
PURPLE='\033[0;35m' # purple
CYAN='\033[0;36m' # cyan
LIGHTGREY='\033[0;37m' # light grey
DARKGREY='\033[0;30m' # dark grey
LIGHTRED='\033[0;31m' # light red
LIGHTGREEN='\033[0;32m' # light green
YELLOW='\033[0;33m' # yellow
LIGHTBLUE='\033[0;34m' # light blue
LIGHTPURPLE='\033[0;35m' # light purple
LIGHTCYAN='\033[0;36m' # light cyan
WHITE='\033[0;37m' # white

function corange {
	local STRING=${1}
	printf "${ORANGE}${STRING}${NC}"
}
function cgreen {
	local STRING=${1}
	printf "${GREEN}${STRING}${NC}"
}
function ccyan {
	local STRING=${1}
	printf "${CYAN}${STRING}${NC}"
}

function isSuccess {
	local STRING=${1}
	#REGEX='^(.*)([0-9]{3})$'
	if [[ $STRING =~ ^(.*)([0-9]{3})$ ]]; then
		local BODY=${BASH_REMATCH[1]}
		local CODE=${BASH_REMATCH[2]}
	fi
	if [[ $CODE =~ 2..$ ]]; then
		printf "[$(ccyan "${CODE}")] - SUCCESS\n" 1>&2
	else
		printf "[$(ccyan "${CODE}")] - ERROR\n" 1>&2
	fi
	printf "${BODY}"
}

function getFile {
	local ENDPOINT=${1}
	case "${ENDPOINT}" in
		*"transport-nodes"*)
			REGEX='transport-nodes/([^\/]+)/([^\/]+)$'
			if [[ ${ENDPOINT} =~ $REGEX ]]; then
				local ITEMID=${BASH_REMATCH[1]}
				local ITEMCM=${BASH_REMATCH[2]}
				NSXOUT="spec.tnode.${ITEMID}.${ITEMCM}.json"
			else
				NSXOUT="spec.tnode.json"
			fi
		;;
		*"transport-zones"*)
			NSXOUT="spec.tzone.json"
		;;
		*"fabric/compute-managers"*)
			NSXOUT="spec.cmanager.json"
		;;
		*"edge-clusters"*)
			NSXOUT="spec.edge-clusters.json"
		;;
		*"cluster-profiles"*)
			NSXOUT="spec.cluster-profiles.json"
		;;
		*"trust-management/certificates"*)
			NSXOUT="spec.certificates.json"
		;;
		*"fabric/nodes"*)
			REGEX='fabric/nodes/([^\/]+)/([^\/]+)$'
			if [[ ${ENDPOINT} =~ $REGEX ]]; then
				local ITEMID=${BASH_REMATCH[1]}
				local ITEMCM=${BASH_REMATCH[2]}
				NSXOUT="spec.node.${ITEMID}.${ITEMCM}.json"
			else
				NSXOUT="spec.node.json"
			fi
		;;
		*"host-switch-profiles"*)
			NSXOUT="spec.profile.json"
		;;
		*"pools/ip-pools")
			NSXOUT="spec.pool.json"
		;;
		*"pools/ip-blocks")
			NSXOUT="spec.block.json"
		;;
		*"logical-routers"*)
			NSXOUT="spec.router.json"
		;;
		*"logical-switches"*)
			NSXOUT="spec.switch.json"
		;;
		*"spec/openapi/nsx_api.json"*)
			NSXOUT="nsx_api.json"
		;;
	esac
	printf "state/$NSXOUT"
}

function buildURL {
	session
	local ENDPOINT=${1}
	local BASE="https://$HOST/api/v1/"
	if [[ "$OFFLINE" == "true" ]]; then
		local NSXFILE=$(getFile "${1}")
		URL="${NSXFILE}"
	else
		URL="$BASE$ENDPOINT"
	fi
	printf "$URL"
}
