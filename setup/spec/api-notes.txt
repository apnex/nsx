cat nsx-api.json | jq '.paths."/logical-switches"'

# URI paths and GET/POST/DELETE actions
.paths
cat nsx-api.json | jq '.paths."/logical-switches".post'

# view get response for logical-switch
cat nsx-api.json | jq'.paths."/logical-switches".get.responses."200"'

# view result spec
cat nsx-api.json | jq --tab '.definitions.LogicalSwitchListResult'

# construct specs!
.definitions
cat nsx-api.json | jq '.definitions.LogicalSwitch'


# test workflow - logical-switch
cat nsx-api.json | jq --tab '.paths."/logical-switches".post.parameters'
cat nsx-api.json | jq --tab '.definitions.LogicalSwitch.allOf[1]'
cat nsx-api.json | jq --tab '.definitions.LogicalSwitch.allOf[1].required' ## foreach required property
cat nsx-api.json | jq --tab '.definitions.LogicalSwitch.allOf[1].properties.admin_state' ## some properties have default values
{
	"enum": [
		"UP",
		"DOWN"
	],
	"type": "string",
	"description": "Represents Desired state of the Logical Switch",
	"title": "Represents Desired state of the Logical Switch"
}
cat nsx-api.json | jq --tab '.definitions.LogicalSwitch.allOf[1].properties.transport_zone_id'
{
	"type": "string",
	"description": "Id of the TransportZone to which this LogicalSwitch is associated",
	"title": "Id of the TransportZone to which this LogicalSwitch is associated"
}

# test workflow - transport-zone
cat nsx-api.json | jq --tab '.paths."/transport-zones".post.parameters'
cat nsx-api.json | jq --tab '.definitions.TransportZone.allOf[1]'
cat nsx-api.json | jq --tab '.definitions.TransportZone.allOf[1].required'
cat nsx-api.json | jq --tab '.definitions.TransportZone.allOf[1].properties.transport_type'
{
	"type": "string",
	"description": "The transport type of this transport zone.",
	"enum": [
		"OVERLAY",
		"VLAN"
	]
}
