#!/bin/bash
DOMAIN=$(cat sddc.parameters | jq -r '.domain')
VSPHOST=$(cat sddc.parameters | jq -r '.endpoints[] | select(.type=="vsp").hostname')
if [[ ! "$VSPHOST" =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
	VSPHOST+=".$DOMAIN" #if not an IP, append domain
fi
VSPUSER=$(cat sddc.parameters | jq -r '.endpoints[] | select(.type=="vsp").username')
VSPPASS=$(cat sddc.parameters | jq -r '.endpoints[] | select(.type=="vsp").password')
VSPONLINE=$(cat sddc.parameters | jq -r '.endpoints[] | select(.type=="vsp").online')
VSPPRINT=$(./drv.sddc.status.sh | jq -r '.[] | select(.type=="vsp").thumbprint')
VSPSESSION='state/vmware-api-session-id'
if [ ! -d state ]; then
	mkdir state;
fi

function vspLogin {
	URL="https://${VSPHOST}/rest/com/vmware/cis/session"
	curl -k -X POST \
	-u ${VSPUSER}:${VSPPASS} \
	"${URL}" 2>/dev/null
}

function vspSession {
	local SESSION=$VSPSESSION
	local ONLINE=$VSPONLINE
	if [[ "$ONLINE" == "true" ]]; then
		if [ -f $SESSION ]; then
			local RUNFIND="$(find ${SESSION} -cmin +10)"
			if [ -n "$RUNFIND" ]; then
				printf "Session older than [600] seconds, reauthenticating...\n" 1>&2
				vspLogin | jq -r '.value' >"$SESSION"
			fi
		else
			printf "File [$SESSION] does not exist - authenticating...\n" 1>&2
			vspLogin | jq -r '.value' >"$SESSION"
		fi
	fi
}

function vspPost {
	local URL=${1}
	local BODY=${2}
	if [[ "$VSPONLINE" == "true" ]]; then
		#STATE=$(getFile "${URL}")
		RESPONSE=$(curl -k -w "%{http_code}" -X POST \
			-H "vmware-api-session-id: $(cat $VSPSESSION)" \
			-H "Content-Type: application/json" \
			-d "$BODY" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
	else
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
	fi
	printf "%s\n" "${RESULT}" | jq --tab .
}

function vspDelete {
	local URL=${1}
	local BODY=${2}
	if [[ "$VSPONLINE" == "true" ]]; then
		#STATE=$(getFile "${URL}")
		RESPONSE=$(curl -k -w "%{http_code}" -G -X DELETE \
			-H "vmware-api-session-id: $(cat $VSPSESSION)" \
			-H "Content-Type: application/x-form-urlencoded" \
			--data-urlencode "$BODY" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
	else
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
	fi
	#work out state synch for deletes
	printf "%s\n" "${RESULT}" | jq --tab .
}

function vspGet {
	local URL=${1}
	if [[ "$VSPONLINE" == "true" ]]; then
		STATE=$(getFile "${URL}")
		RESPONSE=$(curl -k -w "%{http_code}" -X GET \
			-H "vmware-api-session-id: $(cat $VSPSESSION)" \
			-H "Content-Type: application/json" \
		"$URL" 2>/dev/null)
		RESULT=$(isSuccess "${RESPONSE}")
	else
		printf "[$(ccyan "OFFLINE")] - SUCCESS\n" 1>&2
		RESULT=$(cat "${URL}")
		STATE="${URL}"
	fi
	printf "%s\n" "${RESULT}" | jq --tab . >"${STATE}"
	printf "%s\n" "${RESULT}" | jq --tab .
}
